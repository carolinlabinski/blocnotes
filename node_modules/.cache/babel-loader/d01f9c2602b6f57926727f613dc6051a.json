{"ast":null,"code":"var _jsxFileName = \"/Users/carolinlabinski/Documents/THP_next/sem5/day4_blocnote/blocnote/src/components/NoteList/NoteList.jsx\";\nimport React, { useState, useEffect } from \"react\";\n\nconst NoteList = ({\n  triggerShowStorage\n}) => {\n  const [dataList, setDataList] = useState();\n  useEffect(() => {\n    let notes = [];\n\n    for (let i = 0; i < localStorage.length; i++) {\n      notes.push(JSON.parse(localStorage.getItem(i)));\n    }\n\n    updateMyData(notes);\n  }, []);\n\n  const updateMyData = data => {\n    setDataList(data);\n  };\n\n  const notesListRender = dataList.map((data, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-list\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, data.title ? data.title : \"Sans titre\"), \" :\", \" \", data.text ? data.text.substring(0, 15) : \"(vide)\")));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notes-list\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }\n  }, notesListRender, \" \"));\n}; // const getAllItems = () => {\n// \tvar allnotekeys = [];\n// \tfor (let i = 0; i <= localStorage.length; i++) {\n// \t\tconsole.log(\"Show keys \" + localStorage.key(i));\n// \t\tlet xx = allnotekeys.push(localStorage.key(i));\n// \t\t// let notekeys = JSON.parse(localStorage.getItem(localStorage.key(i)));\n// \t\tconsole.log(\"Keys list \" + allnotekeys);\n// \t\t// let allnotes = allnotekeys.map()\n// \t}\n// };\n\n\nexport default NoteList;","map":{"version":3,"sources":["/Users/carolinlabinski/Documents/THP_next/sem5/day4_blocnote/blocnote/src/components/NoteList/NoteList.jsx"],"names":["React","useState","useEffect","NoteList","triggerShowStorage","dataList","setDataList","notes","i","localStorage","length","push","JSON","parse","getItem","updateMyData","data","notesListRender","map","index","title","text","substring"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA4B;AAC5C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,EAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIK,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,YAAY,CAACC,MAAjC,EAAyCF,CAAC,EAA1C,EAA8C;AAC7CD,MAAAA,KAAK,CAACI,IAAN,CAAWC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqBN,CAArB,CAAX,CAAX;AACA;;AACDO,IAAAA,YAAY,CAACR,KAAD,CAAZ;AACA,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMQ,YAAY,GAAIC,IAAD,IAAU;AAC9BV,IAAAA,WAAW,CAACU,IAAD,CAAX;AACA,GAFD;;AAIA,QAAMC,eAAe,GAAGZ,QAAQ,CAACa,GAAT,CAAa,CAACF,IAAD,EAAOG,KAAP,kBACpC;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAEA,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,IAAI,CAACI,KAAL,GAAaJ,IAAI,CAACI,KAAlB,GAA0B,YAA9B,CADD,QACmD,GADnD,EAEEJ,IAAI,CAACK,IAAL,GAAYL,IAAI,CAACK,IAAL,CAAUC,SAAV,CAAoB,CAApB,EAAuB,EAAvB,CAAZ,GAAyC,QAF3C,CADD,CADuB,CAAxB;AASA,sBACC;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAEH,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,eAAJ,MADD,CADD;AAKA,CA7BD,C,CA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAed,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst NoteList = ({ triggerShowStorage }) => {\n\tconst [dataList, setDataList] = useState();\n\n\tuseEffect(() => {\n\t\tlet notes = [];\n\t\tfor (let i = 0; i < localStorage.length; i++) {\n\t\t\tnotes.push(JSON.parse(localStorage.getItem(i)));\n\t\t}\n\t\tupdateMyData(notes);\n\t}, []);\n\n\tconst updateMyData = (data) => {\n\t\tsetDataList(data);\n\t};\n\n\tconst notesListRender = dataList.map((data, index) => (\n\t\t<div className=\"notes-list\" key={index}>\n\t\t\t<li>\n\t\t\t\t<b>{data.title ? data.title : \"Sans titre\"}</b> :{\" \"}\n\t\t\t\t{data.text ? data.text.substring(0, 15) : \"(vide)\"}\n\t\t\t</li>\n\t\t</div>\n\t));\n\n\treturn (\n\t\t<div className=\"notes-list\" key={index}>\n\t\t\t<p>{notesListRender} </p>\n\t\t</div>\n\t);\n};\n\n// const getAllItems = () => {\n// \tvar allnotekeys = [];\n// \tfor (let i = 0; i <= localStorage.length; i++) {\n// \t\tconsole.log(\"Show keys \" + localStorage.key(i));\n// \t\tlet xx = allnotekeys.push(localStorage.key(i));\n// \t\t// let notekeys = JSON.parse(localStorage.getItem(localStorage.key(i)));\n// \t\tconsole.log(\"Keys list \" + allnotekeys);\n// \t\t// let allnotes = allnotekeys.map()\n// \t}\n// };\n\nexport default NoteList;\n"]},"metadata":{},"sourceType":"module"}